{"version":3,"mappings":"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","names":["scene","THREE.Scene","camera","THREE.PerspectiveCamera","renderer","THREE.WebGLRenderer","controls","OrbitControls","ambientLight","THREE.AmbientLight","directionalLight","THREE.DirectionalLight","hemiLight","THREE.HemisphereLight","cubeTextureLoader","THREE.CubeTextureLoader","environmentMap","poolTexture","THREE.TextureLoader","clock","THREE.Clock","radius","boatScaleOffset","boat","treasure","water","ground","loadObjects","Boat","Treasure","Water","Ground","setupUI","__vitePreload","waterResolution","animate","e","elapsedTime"],"ignoreList":[],"sources":["../../src/main.js"],"sourcesContent":["import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\n// Scene setup\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.001, 100);\nconst renderer = new THREE.WebGLRenderer({ antialias: true });\nrenderer.setSize(window.innerWidth, window.innerHeight);\nrenderer.setPixelRatio(devicePixelRatio);\ndocument.body.appendChild(renderer.domElement);\n\ncamera.position.set(2, 2, -6);\n\nconst controls = new OrbitControls(camera, renderer.domElement);\ncontrols.enableDamping = true;\n\n// Lights\nconst ambientLight = new THREE.AmbientLight(0xffffff, 3);\nscene.add(ambientLight);\nconst directionalLight = new THREE.DirectionalLight(0xffffff, 3);\nscene.add(directionalLight);\nconst hemiLight = new THREE.HemisphereLight(0x87ceeb, 0x444444, 1.0);\nhemiLight.position.set(0, 6, 0);\nscene.add(hemiLight);\n\n// Environment map setup\nconst cubeTextureLoader = new THREE.CubeTextureLoader();\ncubeTextureLoader.setPath('/journey/');\nconst environmentMap = cubeTextureLoader.load([\n  'px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png'\n]);\nscene.background = environmentMap;\nscene.environment = environmentMap;\n\n// Texture loader for pool texture\nconst poolTexture = new THREE.TextureLoader().load('/journey/ocean_floor.png');\n\nconst clock = new THREE.Clock();\nconst radius = 2;\nconst boatScaleOffset = 0.03;\n\n// Declare variables for dynamic objects\nlet boat, treasure, water, ground;\n\n// Dynamic imports for heavy objects\nasync function loadObjects() {\n  const [{ Boat }, { Treasure }, { Water }, { Ground }, { setupUI }] = await Promise.all([\n    import('./objects/Boat'),\n    import('./objects/Treasure'),\n    import('./objects/Water'),\n    import('./objects/Ground'),\n    import('./ui')\n  ]);\n\n  boat = new Boat({ radius, boatScaleOffset });\n  treasure = new Treasure();\n\n  scene.add(boat);\n  scene.add(treasure);\n\n  const waterResolution = { size: 512 };\n\n  water = new Water({\n    environmentMap,\n    radius,\n    resolution: waterResolution.size,\n  });\n  scene.add(water);\n\n  ground = new Ground({\n    texture: poolTexture,\n    radius,\n  });\n  scene.add(ground);\n\n  setupUI({ waterResolution, water, ground });\n\n  animate();\n}\n\nwindow.addEventListener('keydown', e => {\n  e.preventDefault();\n  if (boat) boat.keysPressed[e.key.toLowerCase()] = true;\n});\n\nwindow.addEventListener('keyup', e => {\n  if (boat) boat.keysPressed[e.key.toLowerCase()] = false;\n});\n\nfunction animate() {\n  const elapsedTime = clock.getElapsedTime();\n\n  if (water) water.update(elapsedTime);\n  if (ground) ground.update(elapsedTime);\n  if (boat && treasure) boat.update(elapsedTime, water, treasure);\n  controls.update();\n\n  renderer.render(scene, camera);\n  requestAnimationFrame(animate);\n}\n\n// Resize handler\nwindow.addEventListener('resize', () => {\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n});\n\n// Start loading objects dynamically\nloadObjects();\n"],"file":"assets/index-B_es8jiV.js"}